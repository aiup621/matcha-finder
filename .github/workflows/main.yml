name: Run matcha (3 items)

on:
  workflow_dispatch:
    inputs:
      target_new:
        description: "How many new leads to crawl"
        default: "3"
        required: true

jobs:
  run:
    runs-on: ubuntu-latest
    env:
      GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
      GOOGLE_CX: ${{ secrets.GOOGLE_CX }}
      SHEET_ID: ${{ secrets.SHEET_ID }}
      TARGET_NEW: ${{ github.event.inputs.target_new }}
      DEBUG: "1"                      # 詳細ログ（不要なら消してOK）
      SKIP_SHEETS: "0"
      MAX_QUERIES_PER_RUN: "800"      # 1回の実行での検索上限
      EXCLUDE_DOMAINS: facebook.com,mapquest.com,indeed.com,axios.com,lemon8-app.com,tripadvisor.com,yelp.com,opentable.com,ubereats.com,grubhub.com,doordash.com,eventbrite.com,tiktok.com,pinterest.com
      SKIP_ROTATE_THRESHOLD: 20
      MAX_ROTATIONS_PER_RUN: 4
    steps:
      - uses: actions/checkout@v4

      - name: Restore crawler cache
        uses: actions/cache@v4
        with:
          path: .cache
          key: cache-matcha-${{ runner.os }}-${{ hashFiles('requirements_smart.txt', 'config/**', 'smart_search.py', 'persistent_cache.py', 'pipeline_smart.py') }}-${{ env.CACHE_VERSION || 'v1' }}
          restore-keys: |
            cache-matcha-${{ runner.os }}-

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Tesseract OCR
        run: |
          sudo apt-get update
          sudo apt-get install -y tesseract-ocr tesseract-ocr-eng tesseract-ocr-jpn tesseract-ocr-jpn-vert

      - name: Install deps
        run: pip install -r requirements_smart.txt

      - name: Show requirements_smart.txt
        run: |
          echo "===== requirements_smart.txt ====="
          cat requirements_smart.txt || true

      - name: Dependency smoke test
        run: |
          python -m pip check
          python - <<'PY'
          import importlib, sys
          mods = ["PIL","PyPDF2","gspread","bs4","lxml","pdfminer","google.oauth2"]
          missing = []
          for m in mods:
              try:
                  importlib.import_module(m)
              except Exception as e:
                  missing.append(f"{m}: {e}")
          if missing:
              print("Missing modules:\n" + "\n".join(missing))
              sys.exit(1)
          print("All imports OK")
          PY

      - name: Dependency smoke test (OCR)
        run: |
          tesseract --version
          python - <<'PY'
          import importlib, shutil, sys, pytesseract
          mods = ["PIL","PyPDF2","pytesseract","gspread","bs4","lxml","pdfminer","google.oauth2"]
          missing = []
          for m in mods:
              try:
                  importlib.import_module(m)
              except Exception as e:
                  missing.append(f"{m}: {e}")
          if not shutil.which("tesseract"):
              missing.append("tesseract binary: not found in PATH")
          try:
              pytesseract.get_tesseract_version()
          except Exception as e:
              missing.append(f"pytesseract linkage: {e}")
          if missing:
              print("Missing/Issues:\n" + "\n".join(missing))
              sys.exit(1)
          print("All good: pytesseract and tesseract are ready")
          PY

      - name: Write service account json
        run: echo "$SERVICE_ACCOUNT_JSON" > service_account.json
        env:
          SERVICE_ACCOUNT_JSON: ${{ secrets.SERVICE_ACCOUNT_JSON }}

      - name: Run pipeline (up to 3)
        run: python -u pipeline_smart.py

      - name: Save crawler cache
        if: always()
        uses: actions/cache@v4
        with:
          path: .cache
          key: cache-matcha-${{ runner.os }}-${{ hashFiles('requirements_smart.txt', 'config/**', 'smart_search.py', 'persistent_cache.py', 'pipeline_smart.py') }}-${{ env.CACHE_VERSION || 'v1' }}
